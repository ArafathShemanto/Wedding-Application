// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  isNewUser             Boolean                @default(true)
  twoFactorConfirmation TwoFactorConfirmation?
  userProfile           UserProfile[]

  friends       Friend[]        @relation(name: "friends")
  friendRequest FriendRequest[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserProfile {
  id             String  @id @default(cuid()) @map("_id")
  userId         String
  preferenceId   String?
  age            Int?
  name           String?
  gender         String?
  dob            String?
  bio            String?
  language       String?
  profileImage   String?
  height         Float?
  weight         Float?
  bodyType       String?
  physicalStatus String?

  images String[] @default([])

  interests String[]
  hobbies   String[]

  eatingHabits   String?
  drinkingHabits String?
  smokingHabits  String?

  state             String?
  country           String?
  city              String?
  citizenship       String?
  residentialStatus String?

  religion  String?
  ethnicity String?
  caste     String?

  education        String?
  educationDetails String?
  college          String?
  institute        String?

  employedSector    String?
  companyName       String?
  employmentDetails String?
  jobTitle          String?
  annualIncome      Float?

  relationshipType   String?
  maritalStatus      String?
  numberOfDependents Int?    @default(0)

  familyValues     String?
  familyType       String?
  familyStatus     String?
  familyDetails    String?
  fatherOccupation String?
  motherOccupation String?
  siblings         Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  preference Preference[]
}

model Chat {
  id       String    @id @default(cuid()) @map("_id")
  messages Message[]
}

model Message {
  id       String  @id @default(cuid()) @map("_id")
  senderId String
  // receiverId String
  text     String?
  fileUrl  String?

  Chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String @id @default(cuid()) @map("_id")
  senderId   String
  sender     User   @relation(fields: [senderId], references: [id])
  receiverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id     String @id @default(cuid()) @map("_id")
  userId String @map("_userId")

  friendId String
  friend   User   @relation(fields: [friendId], references: [id], name: "friends")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friends")
}

model Preference {
  id             String   @id @default(cuid()) @map("_id")
  userId         String   @map("_userId")
  agestart       String?
  ageTo          String?
  languages      String[]
  heightFrom     String?
  heightTo       String?
  bodyType       String?
  physicalStatus String?
  maritalStatus  String?
  eatingHabits   String?
  drinkingHabits String?
  smokingHabits  String?
  religion       String?
  ethnicity      String?
  caste          String?
  education      String?
  employedIn     String?
  occupation     String?
  jobTitle       String?
  annualIncome   String?
  country        String?
  city           String?
  state          String?

  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
